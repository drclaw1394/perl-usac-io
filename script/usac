#!/usr/bin/env perl
 
my $backend=$ENV{uSAC_IO_Backend};


# Strip out first instance of backend
#
my $i=0;
my $found;

for(@ARGV){
  
  if($ARGV[$i] =~/-{1,2}backend/){
    $found=$i;
    last 
  }
  $i++;
}

if(defined $found){
  # This overrides the envrionment setting
  (undef, $backend)=splice @ARGV, $found, 2;
}


die "No backend specified. Use environment or --backend" unless $backend;



# NOTE: perl will consume any arguments BEFORE the argument we use for the do
# script (in _main) It will also not run when an unsupported switch is
# provided.  Therefore the first item in @ARGV in the uSAC::Main::_main
# function will be the script we want to execute
#
my @list=($^X,"-M$backend", "-MuSAC::Main", "-e", "uSAC::Main::_main", @ARGV);
print "@list";
print "\n";
exec @list;

=pod

=head1 NAME

usac - Cleaner Event Driven Perl,less Boilerplate, more diagnostics

=head2 SYNOPSIS


  usac --backend BACKEND your_async_event_script ....



=head1 DESCRIPTION

Perl had no built in event loop system like Node.js for example. This gives
great flexibilty in it's usage, but does lends it self to a little mess when
trying to support multitple event loops.


Packages like L<AnyEvent> for example, address this with wrapping other event
systems into a common API interface. L<uSAC::IO>  does this too, (but with a
difference approach).  However, you still need to 'setup the run loop' before
you have a functional program.


L<usac> is a special program which wraps Perl itself, to automaticall create an
event processing run loop (of your choosing) behind the scenes. This means your
L<uSAC::IO> scripts work without needing any event system run loop knowledge.


For example instead of:
  
    #!/usr/bin/env perl
    #
    use AnyEvent;

    my $cv=AE::cv;

    my $timer;

    $timer=AE::timer 1, 0 , sub {
      say "Hello"
      $timer=undef;
    };

    $cv->recv;





You do this:

  #!/usr/bin/env usac --backend AnyEvent
  #
  use uSAC::IO;

  timer 1, 0, sub {
    say "Hello"
    &timer_cancel;
  };


It also supports L<Error::Show> to better display and trace errors when running
perl code!

=head1 USAGE

The L<usac> script, wraps the perl executable, passing all command line
arguments as is to perl. IT adds support for an additional command line
argument called C<--backend>. This is the package name of the Event system to
use.


  usac --backend BACKEND  [perl arguments]


=head1 AUTHOR

Ruben Westerberg, E<lt>drclaw@mac.comE<gt>

=head1 REPOSITORTY and BUGS

Please report any bugs via git hub:

L<http://github.com/drclaw1394/perl-usac-io>


=head1 COPYRIGHT AND LICENSE

Copyright (C) 2024 by Ruben Westerberg

This library is free software; you can redistribute it and/or modify it under
the same terms as Perl or the MIT license.

=head1 DISCLAIMER OF WARRANTIES

THIS PACKAGE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS FOR A PARTICULAR PURPOSE.

=cut

