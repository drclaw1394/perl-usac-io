=head1 NAME

uSAC::IO - Asynchronous Socket/Pipe/FIFO IO

=head1 SYNOPSIS

	use uSAC::SIO;

	#Existing file handle my $fh=open_nonblocking_socket_or_pipe_somehow();
	#ctx my $ctx={could_be=>"any user defined scalar/object"};
	
	#Create a new sio object with the nominated context and file handle my
	$sio=uSAC::SIO->new($ctx, $fh);

	#Event accessors are read/write lvalues. Makes for neat and efficient
	code $sio->on_error=sub {}; $sio->on_read=sub {}; $sio->on_eof=sub {};


	#Start reading events $sio->start;
	
	#queuing write with no callback $sio->write("hello world");

	#queuing write with callback $sio->write("hello again", sub { say
	"Write complete" });


	#pause the event hanlding from the fh #Call start to renable events
	$sio->pause;


=head1 DESCRIPTION

L<uSAC::IO> is an IO library for constructing asynchronous Perl programs. It
relies on external event systems to implement event processing, and rather
focuses on making interfacing to these systems cleaner and easier. When used
with the L<usac> program, it makes writing portable event programs easy and
very tidy!

It provides subroutines to create reader, writer, timer etc, objects, without
the user needing to know how to use the underliying event loop, or even setup
an event loop (when using L<usac>)


=head1 MOTIVATION

1. Cleaning up Perl event based prgrams
2. Make them easier to write and improving performance
3. Boosting IO throughput
4. Reducing memory usage



=head1 API

=head2 Readers and Writers

Once streams are established on a socket, the data can be consumed or pushed
using readers and writers. There is no 'Socket Object' just the file descriptor
used in the operating system.

=head3 sreader

Creates a stream reader object L<uSAC::IO::SReader> for the given file descriptor

=head3 dreader 

Creats a datagram reader object L<uSAC::IO::DReader> for the given file descriptor

=head3 reader

Creates a stream L<uSAC::IO::SReader> or datagram L<uSAC::IO::DReader> reader
based on the intrinisit knowlege of the filedescriptor


=head3 swriter

Creates a stream writer L<uSAC::IO::SWriter> object for the given file descriptor

=head3 dwriter

Creats a datagram writer L<uSAC::IO::DWriter> object for the given file descriptor

=head3 writer

Creates a stream L<uSAC::IO::SWriter> or datagram L<uSAC::IO::DWriter> writer
based on the intrinisit knowlege of the filedescriptor

=head2 Timers

=head3 timer

  timer start, repead, callback

Creates a timer 

Returns an id which identifies the timer, and can be used to cancel the timer.

=head3 timer_cancel

Cancels an existing timer.



=head2 Socket Staging


Sockets are created and setup in 'stages'. The handlers for each stage are
supplied in the 'hints' argument. These hints are an expanded version used for
getaddrinfo and getnameinfo. This makes passing information around very easy
low memory.


the fields utilised in the staging are:

on_spec

=head3 socket_stage

  socket_stage $spec, $next


Take a C<$spec> hash, (or a string to parse into one), which gives all the
information on what type of socket to create, what to connect or listen to etc.

C<$next> is the custom callback sub to use when a socket spec has been created.

=head3 connect
  
    connect($socket, $hints);

Connects C<socket> to a host given information in C<hints>. Performs any name resolution required in an
asynchronous manner

=head3 connect_cancel

Cancels an existing connection attempt

=head3 connect_addr

Connects to a host using a pre resolved address information. Callback is called
when connection is successfull, or error callback is exectued on error


=head3 accept

=head3 listen


=head3

=head1 AUTHOR

Ruben Westerberg, E<lt>drclaw@mac.comE<gt>

=head1 REPOSITORTY and BUGS

Please report any bugs via git hub:

L<http://github.com/drclaw1394/perl-usac-io>


=head1 COPYRIGHT AND LICENSE

Copyright (C) 2024 by Ruben Westerberg

This library is free software; you can redistribute it and/or modify it under
the same terms as Perl or the MIT license.

=head1 DISCLAIMER OF WARRANTIES

THIS PACKAGE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS FOR A PARTICULAR PURPOSE.

=cut
